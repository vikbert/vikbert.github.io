{"title":"Semicolons in JavaScript","slug":"semicolon-always","html":"<h5 class=\"yellow\">\n  ✪ Semicolons aren’t exactly mandatory, but they aren’t exactly optional, either\n</h5>\n\n<p>JavaScript’s Automatic Semicolon Insertion (ASI). Basically, JavaScript will put semicolons in for you automatically if you leave them out. So, they aren’t mandatory after all, but they aren’t exactly optional, either. Some develpers adopt the no-semicolon coding style like Vue.js and relying on Automatic Semicolon Insertion(ASI). Unfortunately, it breaks things in many ambiguous cases.</p>\n<h5 class=\"yellow\">\n    ✪ Failed to compile. Missing semicolon semi.\n</h5>\n\n<p>There are many known issues opened/closed in open source projects because of missing semicolons. For example:</p>\n<p>Failed to compile. Missing semicolon semi on facebook\n<a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/facebook/create-react-app/issues/4698\">https://github.com/facebook/create-react-app/issues/4698</a></p>\n<h5 class=\"yellow\">\n  ✪ An ambiguous case that breaks in the absence of a semicolon\n</h5>\n\n<pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token comment\">// define a function</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// semicolon missing at this line</span>\n\n<span class=\"token comment\">// then execute some code inside a closure</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre><p>this will intepreted as: </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre><p>This will end up passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. The second function will fail with a &quot;... is not a function&quot; error at runtime.</p>\n<p><strong>the following code without semicolon seems absolute ok</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ❌ the code seems fine, but will not work</span>\n<span class=\"token keyword\">const</span> puppeteer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'puppeteer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">goto</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">screenshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>path<span class=\"token operator\">:</span> <span class=\"token string\">'example.png'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre><p>Because Node.js doesn’t know that it should stop after <code>const puppeteer = require(&#39;puppeteer&#39;)</code>, because it doesn’t have a semicolon to go by. Instead, it sees an opening brace coming up below and interprets that to be a function call. It sees the code as something like this:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ❌ the actual code will be executed in runtime</span>\n<span class=\"token keyword\">const</span> puppeteer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'puppeteer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">goto</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">screenshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>path<span class=\"token operator\">:</span> <span class=\"token string\">'example.png'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre><p>Addinng the <strong>semicolons</strong> to the same code above will let the program run well as expected. ✅</p>\n<h5 class=\"yellow\">\n    ✪ Some shortcuts without semicolon break\n</h5>\n\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// infinite loop, where the semicolon is parsed as an empty statement</span></code></pre><p>If the semicolon was omitted, this shortcut would not be complete and breaks.</p>\n<h5 class=\"yellow\">\n  Conclusion\n</h5>\n\n<p>Just like new lines between statements, and tabs/spaces used for indentation, semicolons, in my opinion, make the code more organized and readable. Semicolons, similar to a dangling comma at the end of an argument list or last object prop, is a sign of respect for the next developer to work on the code, including yourself. One liners, people copy from StackOverflow, are not readable code — trying to decipher 5 functions concatenated into a single line is just not what human brain wants to be doing. Write code with brackets, commas and semicolons and let the minifier do its job.</p>\n<p><code>ASI</code> is a correction mechanism. It tries to keep your code running when no other syntax error would hinder that. But it will fullfill the requirement of all of use cases.</p>\n<hr>\n<p><strong>References:</strong></p>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://dev.to/adriennemiller/semicolons-in-javascript-to-use-or-not-to-use-2nli\">dev.to 🔗 semicolon in javascript to use or not to ues</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://stackoverflow.com/questions/444080/do-you-recommend-using-semicolons-after-every-statement-in-javascript\">stackoverflow.com 🔗 using semicolon after every statement in javascript</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/better-programming/you-might-need-those-semicolons-in-your-javascript-after-all-b28154f93ea8\">medium.com 🔗 you might need those semicolons in your js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/better-programming/the-use-of-the-javascript-semicolon-843fd5e94d0e\">medium.com 🔗 the use of javascript semicolon</a></li>\n</ul>\n","date":"2020-06-11","excerpt":"\nUse semicolons always in JavaScript code, and the consistency is more important than saving a few bytes. In some ambiguous cases, the code will throw the error at runtime. Why?\n\n","printDate":"June 11, 2020","printReadingTime":"3 min read"}